---
title: tkinter example BZOJGUIw (snippet)
date: 2020-02-09
tags: ["python"]
---
Python tkinter example 'BZOJGUIw'

Functions in program: 
* `def update_table():`
* `def sortby(tree, col, descending):`
* `def Read_Remote_Data():`
* `def Process_String(Stat_Str):`

Modules used in program: 
* `import subprocess`
* `import urllib,urllib.request,ctypes,re,os,time`
* `import tkinter.ttk as ttk`
* `import tkinter.font as tkFont`
* `import tkinter as tk`

## python BZOJGUIw

Python tkinter example: BZOJGUIw

```python
#!/usr/bin/python3.3
import tkinter as tk
import tkinter.font as tkFont
import tkinter.ttk as ttk
import urllib,urllib.request,ctypes,re,os,time
from threading import Thread
import subprocess

rawurl='http://www.lydsy.com/JudgeOnline/status.php?'
url='http://www.lydsy.com/JudgeOnline/status.php?'
pattern1=re.compile(r"<tr align=center class='(evenrow|oddrow)'>(.*?)</tr>")
pattern_sid=re.compile(r"<td>(\d+)<td>")
pattern_user=re.compile(r"user=(.*?)'>")
pattern_problem=re.compile(r"id=(.*?)'>")
pattern_status=re.compile(r"<td><font color=(.*?)>(.*?)</font><td>")
pattern_memory=re.compile(r"<td>(\d+) <font color=(.*?)>kb</font>")
pattern_time=re.compile(r"<td>(\d+) <font color=red>ms</font>")
# pattern_lang=re.compile('((C|C++)|(Pascal|Java))|((Ruby|Bash)|Python)')
pattern_len=re.compile(r"\d+ B")
pattern_running=re.compile("------")
pattern_submit_time=re.compile(r"\d+-\d+-\d+ \d+:\d+:\d+")

avgdelay=0
totdelay=0
querycount=0

def Process_String(Stat_Str):
    return {
        'Accepted': '通过',
        'Presentation_Error': '格式错误',
        'Wrong_Answer': '答案错误',
        'Time_Limit_Exceed': '时间超限',
        'Memory_Limit_Exceed': '内存超限',
        'Output_Limit_Exceed':'输出超限',
        'Runtime_Error': '运行错误',
        'Compile_Error': '编译错误',
        'Pending': '等待中',
        'Pending_Rejudging': '等待重判',
        'Compiling': '编译中',
        'Running_&_Judging': '评判中'
        }[Stat_Str]

def Read_Remote_Data():
    global avgdelay
    global totdelay
    global querycount
    begin=time.time()
    html=urllib.request.urlopen(url).read().decode("utf8")
    end=(time.time()-begin)*1000
    querycount=querycount+1
    totdelay+=end
    avgdelay=((totdelay*10)//querycount)/10
    status_list = pattern1.findall(html)
    List_list = []
    for status_str in status_list:
        Stat=pattern_running.findall(status_str[1])
        if (Stat):
            List_list.append((pattern_sid.findall(status_str[1])[0],\
            pattern_user.findall(status_str[1])[0],\
            pattern_problem.findall(status_str[1])[0],\
            Process_String(pattern_status.findall(status_str[1])[0][1]),\
            '*',\
            '*',\
            pattern_len.findall(status_str[1])[0],\
            pattern_submit_time.findall(status_str[1])[0]
    ))
        else:
            List_list.append((pattern_sid.findall(status_str[1])[0],\
            pattern_user.findall(status_str[1])[0],\
            pattern_problem.findall(status_str[1])[0],\
            Process_String(pattern_status.findall(status_str[1])[0][1]),\
            pattern_time.findall(status_str[1])[0]+' MS',\
            pattern_memory.findall(status_str[1])[0][0]+' K',\
            pattern_len.findall(status_str[1])[0],\
            pattern_submit_time.findall(status_str[1])[0]
    ))
    return List_list

class McListBox():
    """use a ttk.TreeView as a multicolumn ListBox"""
    def __init__(self,table_header = None,table_list = None):
        self.table_header = table_header
        self.table_list = table_list
        self.tree = None
        self._setup_widgets()
        self._build_tree()


    def _setup_widgets(self):
        self.container = ttk.Frame()
        self.container.pack(fill='both', expand=False)
        # create a treeview with dual scrollbars
        self.tree = ttk.Treeview(columns=self.table_header, show="headings")
        self.vsb = ttk.Scrollbar(orient="vertical",
            command=self.tree.yview)
        self.hsb = ttk.Scrollbar(orient="horizontal",
            command=self.tree.xview)
        self.tree.configure(yscrollcommand=self.vsb.set,
            xscrollcommand=self.hsb.set)
        self.tree.grid(column=0, row=0, sticky='nsew', in_=self.container)
        self.vsb.grid(column=1, row=0, sticky='ns', in_=self.container)
        self.hsb.grid(column=0, row=1, sticky='ew', in_=self.container)

        self.container.grid_columnconfigure(0, weight=1)
        self.container.grid_rowconfigure(0, weight=1)

    def _build_tree(self):
        for col in self.table_header:
            self.tree.heading(col, text=col.title(),
                command=lambda c=col: sortby(self.tree, c, 0))
            # adjust the column's width to the header string
            self.tree.column(col,
                width=tkFont.Font().measure(col.title()))

        for item in self.table_list:
            self.tree.insert('', 'end', values=item)
            # adjust column's width if necessary to fit each value
            for ix, val in enumerate(item):
                col_w = tkFont.Font().measure(val)
                if self.tree.column(self.table_header[ix],width=None)<col_w:
                    self.tree.column(self.table_header[ix], width=col_w)

        #print(self.container.width)

    def update_tree(self,table_list = None):
        self.table_list = table_list
        self._build_tree()

    def _rebuild_tree(self):
        self.tree.configure(columns=self.table_header)
        self._build_tree()

    def _set_header(self,header = None):
        self.table_header = header

    def _set_list(self,list = None):
        self.table_list = list

def sortby(tree, col, descending):
    """sort tree contents when a column header is clicked on"""
    # grab values to sort
    data = [(tree.set(child, col), child) \
        for child in tree.get_children('')]
    # if the data to be sorted is numeric change to float
    #data =  change_numeric(data)
    # now sort the data in place
    data.sort(reverse=descending)
    for ix, item in enumerate(data):
        tree.move(item[1], '', ix)
    # switch the heading so it will sort in the opposite direction
    tree.heading(col, command=lambda col=col: sortby(tree, col, \
        int(not descending)))

def update_table():
    for i in map(mc_listbox.tree.delete,mc_listbox.tree.get_children('')):
        pass
    try:
        List_list = Read_Remote_Data()
    except:
        print('...')
    else:
        mc_listbox.update_tree(table_list = List_list)

List_header = ['运行编号','用户名','题目编号','结果','耗时','耗内存','代码长度','提交时间']
List_list = []
if __name__ == "__main__" :
    root = tk.Tk()
    root.wm_title("BZOJ Status Watcher")
    topframe=tk.Frame(root,height=80)
    pid=tk.StringVar()
    uid=tk.StringVar()
    label1 = tk.Label(topframe,text = '题号：')
    entry1 = tk.Entry(topframe,textvariable=pid)
    label2 = tk.Label(topframe,text = '用户名：')
    entry2 = tk.Entry(topframe,textvariable=uid)
    def query_button():
        global url
        url=rawurl+"problem_id="+pid.get()+"&user_id="+uid.get()
    querybutton=tk.Button(topframe,height=1,text='查询',command=query_button)
    def reset_button():
        global url
        url=rawurl
        pid.set('')
        uid.set('')
    resetbutton=tk.Button(topframe,height=1,text='重置',command=reset_button)
    label1.grid(row=0,column=0)
    entry1.grid(row=0,column=1)
    label2.grid(row=0,column=3)
    entry2.grid(row=0,column=4)
    querybutton.grid(row=0,column=5)
    resetbutton.grid(row=0,column=6)
    topframe.pack()
    mc_listbox = McListBox(table_header=List_header,table_list=List_list)
    html=urllib.request.urlopen(url).read().decode("utf8")
    status_list = pattern1.findall(html)
    for status_str in status_list:
        List_list.append((pattern_sid.findall(status_str[1])[0],\
        pattern_user.findall(status_str[1])[0],\
        pattern_problem.findall(status_str[1])[0],\
        pattern_status.findall(status_str[1])[0][1],\
        pattern_len.findall(status_str[1])[0],\
        pattern_submit_time.findall(status_str[1])[0]
))
    update_table()
    def Clock(Item):
        for i in map(Item.tree.delete,Item.tree.get_children('')):
            pass
        try:
            List_list = Read_Remote_Data()
        except:
            root.wm_title("BZOJ Status Watcher"+"    Failed when processing the latest query")
        else:
            Item.update_tree(table_list = List_list)
        #root.wm_title("BZOJ Status Watcher"+"    Average Network Delay:"+str(avgdelay)+" ms")
        root.wm_title("BZOJ Status Watcher")
        Item.tree.after(1000-int(avgdelay), Clock,Item)
    Clock(mc_listbox)
    root.mainloop()

'''
BZOJ Status Watcher
===================
This script is published under the GPL 3.0 License
You may find it (at here)[https://www.gnu.org/licenses/gpl-3.0.txt]

* You must keep this command when republish this script
* You must use GPL 3.0 License (or higher version) when you republish this script
* Thank you
'''

```

## Python links

- Learn Python: https://pythonbasics.org/
- Python Tutorial: https://pythonprogramminglanguage.com
